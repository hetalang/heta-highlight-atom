name: 'Heta language'
scopeName: 'source.heta'
fileTypes: [ 'heta' ]
limitLineLength: false

patterns: [
	{ include: "#linecomment" }
	{ include: "#blockcomment" }
	{ include: "#note"}
	{ include: "#basestruct"}
	{ include: "#namespace" }
]
repository:
	index:
		name: "meta.index.heta"
		match: "(?:([A-Za-z_][A-Za-z0-9_]*)::)?([A-Za-z_][A-Za-z0-9_]*)"
		captures:
			"1":
				name: "meta.space.heta"
			"3":
				name: "meta.id.heta"
	namespace:
		name: "meta.namespace.heta"
		begin: "(namespace) +(.*) +(begin)"
		beginCaptures:
			"1":
				name: "keyword.control.heta"
			"2":
				name: "meta.other.heta"
				patterns: []
			"3":
				name: "keyword.control.heta"
		end: "end"
		endCaptures:
			"0":
				name: "keyword.control.heta"
		patterns: [
			{ include: "#linecomment" }
			{ include: "#blockcomment" }
			{ include: "#note"}
			{ include: "#basestruct"}
		]
	dict0:
		begin: "\\{"
		beginCaptures:
			"0":
				name: "punctuation.definition.dictionary.begin.heta"
		end: "\\}"
		endCaptures:
			"0":
				name: "punctuation.definition.dictionary.end.heta"
		name: "meta.structure.dictionary.heta"
		patterns: [
			{
				include: "#linecomment"
			}
			{
				name: "entity.other.heta"
				begin: "([A-Za-z_][A-Za-z0-9_]*)\\s*:\\s*"
				beginCaptures:
					"1":
						name: "support.type.property-name.heta"
				end: ",|$|(?=//)|(?=/\\*)|(?=\\})"
				patterns: [
					{
						include: "#dict"
					}
					{
						include: "#boolean"
					}
					{
						include: "#array"
					}
					{
						include: "#string"
					}
					{
						include: "#number"
					}
				]
			}
		]
	number:
		name: "constant.numeric.heta"
		match: "[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?"
	boolean:
		name: "constant.language.heta"
		match: "true|false"
	array:
		name: "other.heta"
		begin: "\\["
		end: "\\]"
		patterns: [
			{
				match: "([ \r\n]*),([ \r\n]*)"
				name: "heta"
			}
			{ include: "#linecomment" }
			{ include: "#dict" }
			{ include: "#array" }
			{ include: "#boolean" }
			{ include: "#number" }
			{ include: "#string" }
		]
	note:
		name: "comment.block.note.heta"
		begin: "'''"
		end: "'''"
	linecomment:
		name: "comment.line.double-slash.heta"
		begin: "//"
		end: "$"
	blockcomment:
		name: "comment.block.heta"
		begin: "/\\*"
		end: "\\*/"
	basestruct:
		name: "keyword.control.heta"
		end: ";"
		patterns: [
			{ include: "#namespace" }
			{ include: "#blockcomment" }
			{ include: "#class" }
			{ include: "#action" }
			{ include: "#title" }
			{ include: "#dict" }
			{ include: "#assignmentShort" }
			{ include: "#assignment" }
		]
	class:
		name: "support.class.heta"
		match: "@\\w+"
	action:
		name: "support.function.heta"
		match: "#\\w+"
	title:
		name: "string.quoted.heta"
		match: "'.*?'"
	dict:
		begin: "\\{"
		beginCaptures:
			"0":
				name: "punctuation.definition.dictionary.begin.heta"
		end: "\\}"
		endCaptures:
			"0":
				name: "punctuation.definition.dictionary.end.heta"
		name: "meta.structure.dictionary.heta"
		patterns: [
			{
				include: "#linecomment"
			}
			{
				name: "entity.other.heta"
				begin: "([A-Za-z_][A-Za-z0-9_]*)\\s*:\\s*"
				beginCaptures:
					"1":
						name: "variable.heta"
				end: ",|(?=\\})"
				patterns: [
					{ include: "#linecomment" }
					{ include: "#dict" }
					{ include: "#array" }
					{ include: "#boolean" }
					{ include: "#number" }
					{ include: "#string" }
				]
			}
		]
	string:
		name: "string.quoted.heta"
		match: "(\".*?\")|([^\",\}\\]]+)"
	assignmentShort:
		name: "assignment.heta"
		match: "([.:`]?=)\s*([^,]+)"
		captures:
			"1":
				name: "operator.heta"
			"2":
				name: "string.heta"
	assignment:
		name: "assignment.heta"
		match: "(\\[([a-zA-Z_]?\\w*)\\]=)\s*([^,]+)"
		captures:
			"1":
				name: "operator.heta"
			"2":
				name: "meta.id.heta"
			"3":
				patterns: [
					{ include: "#string" }
					{ include: "#number" }
				]
